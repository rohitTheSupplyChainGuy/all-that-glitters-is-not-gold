geom_histogram(color="black", fill="white",binwidth = 5) +
xlab("Power Output in MW")
plot7 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.)) +
geom_histogram(color="black", fill="white",binwidth = 3) +
xlab("Wind speed in Meters per second")
grid.arrange(plot5,plot7,ncol=2)
baselineModel.mean <- mean(windPowerGenerationData.train$Power.output..MW.)
ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,                                                 y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Baseline model with mean power output")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
geom_hline(yintercept = mean(windPowerGenerationData.train$Power.output..MW.),linetype = "dashed",color  = "blue")
powerGeneration.lm <- lm(Power.output..MW.~Wind.Speed..m.s.,
data=windPowerGenerationData.train)
summary(powerGeneration.lm)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("The linear model seems to be doing a good job, right ?")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
geom_smooth(method = lm)
par(mfrow = c(2,2))
plot(powerGeneration.lm)
powerGeneration.lm1 <- lm(Power.output..MW.~ 0 + Wind.Speed..m.s.,
data=windPowerGenerationData.train)
summary(powerGeneration.lm1)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("The model with intercept set to 0 performs even worse")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
stat_smooth(method = "lm", formula = y~0+x)
par(mfrow = c(2,2))
plot(powerGeneration.lm1)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the Power generation speed in MW")+
xlab("Wind speed (in ms)") + ylab("Log of Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Log transforming the wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the power generation and wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Log Power output (in MW)")
windSpeedSquared <- (log(windPowerGenerationData.train$Wind.Speed..m.s.))^2
windPowerGenerationData.train <- cbind(windPowerGenerationData.train,windSpeedSquared)
windSpeedSquared <- (log(windPowerGenerationData.test$Wind.Speed..m.s.))^2
windPowerGenerationData.test <- cbind(windPowerGenerationData.test,windSpeedSquared)
quadratic.lm <- lm(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train)
#outliers are removed
windPowerGenerationData.train <- windPowerGenerationData.train[-c(169,156,177),]
quadratic.lm <- lm(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train)
summary(quadratic.lm)
par(mfrow = c(2,2))
plot(quadratic.lm)
windPowerGenerationData.train$predictedQuadratic <-   predict(quadratic.lm)
str(windPowerGenerationData.train)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
geom_line(aes(y = windPowerGenerationData.train$predictedQuadratic), size = 1, color = "blue")+
ggtitle("The quadratic does seems to reduce the heteroscadesticity")+
xlab("Wind speed in ms") + ylab("Power output in MW")
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
geom_line(aes(y = windPowerGenerationData.train$predictedQuadratic), size = 1, color = "blue")+
ggtitle("The quadratic model does seems to reduce the heteroscadesticity")+
xlab("Wind speed in ms") + ylab("Power output in MW")
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
geom_line(aes(y = windPowerGenerationData.train$predictedQuadratic), size = 1, color = "blue")+
ggtitle("The quadratic model does seems to reduce the heteroscadesticity")+
xlab("Wind speed in meters per second") + ylab("Power output in MW")
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the Power generation speed in MW")+
xlab("Wind speed (in ms)") + ylab("Log of Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Log transforming the wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the power generation and wind speed in ms")+
xlab("Log of Wind speed in meters per second") + ylab("Log Power output (in MW)")
plot5 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Power.output..MW.)) +
geom_histogram(color="black", fill="white",binwidth = 5) +
xlab("Power Output (in MW)")
plot7 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.)) +
geom_histogram(color="black", fill="white",binwidth = 3) +
xlab("Wind speed (in ms)")
grid.arrange(plot5,plot7,ncol=2)
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
rmseDataTable1
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
melt(rmseDataTable1)
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable)
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable)
ggplot(tg, aes(x=dose, y=length, colour=supp)) + geom_line()
rmse.melt
ggplot(rmse.melt, aes(x=variable, y=value, colour=supp)) + geom_line()
ggplot(rmse.melt, aes(x=variable, y=value, colour=varible)) + geom_line()
ggplot(rmse.melt, aes(x=variable, y=value, colour=variable)) + geom_line()
rmse.melt
ggplot(rmse.melt, aes(x=rmse.melt$`Model type`, y=value, colour=variable)) + geom_line()
ggplot(rmse.melt, aes(x=rmse.melt$`Model type`, y=rmse.melt$value, colour=rmse.melt$variable))+
geom_line()
ggplot(rmse.melt, aes(x=`Model type`, y=value, colour=variable))+
geom_line()
ggplot(rmse.melt, aes(x=`Model type`, y=value, colour=variable))+
geom_point()
ggplot(rmse.melt, aes(x=`Model type`, y=value, colour=variable))+
geom_line()
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable))+
geom_line()
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
xlab("RMSE values across models")
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ylab("RMSE values across models")
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ylab("RMSE values")
rmseDataTable
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable)
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ylab("RMSE values")
pacman::p_load(caret, data.table, ggplot2,gridExtra,ggpubr,MASS,stats,mlmetrics)
knitr::opts_chunk$set(echo = FALSE, fig.width=12, fig.height=6, fig.path = 'Figs/')
options(digits = 3)
set.seed(123)
windPowerGenerationData <- read.csv("C:/Users/rohit/Desktop/Analytics Project/All-that-glitters-is-not-gold/wind-mill-dataset.csv", header = TRUE)
windPowerGenerationData <- windPowerGenerationData[,-5]
str(windPowerGenerationData)
#windPowerGenerationData <- windPowerGenerationData[windPowerGenerationData$Power.output..MW. != 0,]
trainIndex <- sample(1:nrow(windPowerGenerationData),0.7*nrow(windPowerGenerationData))
windPowerGenerationData.train <- windPowerGenerationData[trainIndex,]
windPowerGenerationData.test <- windPowerGenerationData[-trainIndex,]
windPowerGenerationData.train <- setDT(windPowerGenerationData.train)
windPowerGenerationData.test <- setDT(windPowerGenerationData.test)
str(windPowerGenerationData.train)
str(windPowerGenerationData.test)
summary(windPowerGenerationData.train)
plot1 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Location,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_boxplot()+
ggtitle("Power generation across locations")+
xlab("Location") + ylab("Power generated (in MW)")
plot2 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Location,
y=windPowerGenerationData.train$Wind.Speed..m.s.))+
geom_boxplot()+
ggtitle("Wind speed across locations")+
xlab("Location") + ylab("Wind speed (in ms)")
plot3 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Location))+
geom_bar()+
ggtitle("Number of records across locations")+
xlab("Location")
plot4 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,                                                 y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Strong positive correlation exists")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
stat_cor(method="pearson")
grid.arrange(plot3,plot2,plot1,plot4,nrow=2,ncol=2)
windPowerGenerationData.train <-  windPowerGenerationData.train[windPowerGenerationData.train$Power.output..MW.!= 0]
plot5 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Power.output..MW.)) +
geom_histogram(color="black", fill="white",binwidth = 5) +
xlab("Power Output (in MW)")
plot7 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.)) +
geom_histogram(color="black", fill="white",binwidth = 3) +
xlab("Wind speed (in ms)")
grid.arrange(plot5,plot7,ncol=2)
baselineModel.mean <- mean(windPowerGenerationData.train$Power.output..MW.)
ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,                                                 y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Baseline model with mean power output")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
geom_hline(yintercept = mean(windPowerGenerationData.train$Power.output..MW.),linetype = "dashed",color  = "blue")
powerGeneration.lm <- lm(Power.output..MW.~Wind.Speed..m.s.,
data=windPowerGenerationData.train)
summary(powerGeneration.lm)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("The linear model seems to be doing a good job, right ?")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
geom_smooth(method = lm)
par(mfrow = c(2,2))
plot(powerGeneration.lm)
powerGeneration.lm1 <- lm(Power.output..MW.~ 0 + Wind.Speed..m.s.,
data=windPowerGenerationData.train)
summary(powerGeneration.lm1)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("The model with intercept set to 0 performs even worse")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
stat_smooth(method = "lm", formula = y~0+x)
par(mfrow = c(2,2))
plot(powerGeneration.lm1)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the Power generation speed in MW")+
xlab("Wind speed (in ms)") + ylab("Log of Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Log transforming the wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the power generation and wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Log Power output (in MW)")
windSpeedSquared <- (log(windPowerGenerationData.train$Wind.Speed..m.s.))^2
windPowerGenerationData.train <- cbind(windPowerGenerationData.train,windSpeedSquared)
windSpeedSquared <- (log(windPowerGenerationData.test$Wind.Speed..m.s.))^2
windPowerGenerationData.test <- cbind(windPowerGenerationData.test,windSpeedSquared)
quadratic.lm <- lm(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train)
#outliers are removed
windPowerGenerationData.train <- windPowerGenerationData.train[-c(169,156,177),]
quadratic.lm <- lm(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train)
summary(quadratic.lm)
par(mfrow = c(2,2))
plot(quadratic.lm)
windPowerGenerationData.train$predictedQuadratic <-   predict(quadratic.lm)
str(windPowerGenerationData.train)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
geom_line(aes(y = windPowerGenerationData.train$predictedQuadratic), size = 1, color = "blue")+
ggtitle("The quadratic model does seems to reduce the heteroscadesticity")+
xlab("Wind speed in ms") + ylab("Power output in MW")
train.control <- trainControl(method = "repeatedcv",number = 5, repeats = 4)
crossValidatedModel <- train(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train, method = "lm",trControl = train.control)
crossValidatedRMSE.df <- data.frame(1:20,crossValidatedModel$resample$RMSE)
ggplot(crossValidatedRMSE.df, aes(x=crossValidatedRMSE.df$X1.20, y=crossValidatedRMSE.df$crossValidatedModel.resample.RMSE))+
geom_line()+
ggtitle("RMSE of predicted power output is consistent within 1 to 1.4 MW")+
xlab("Cross-validation number") +
ylab("RMSE")
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.train)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.train)
rmse1 <- RMSE(quadratic.predict,windPowerGenerationData.train$Power.output..MW.)
rmse2 <- RMSE(predictedPowerOriginal,windPowerGenerationData.train$Power.output..MW.)
rmse3 <- RMSE(mean(windPowerGenerationData.train$Power.output..MW.),windPowerGenerationData.train$Power.output..MW.)
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable)
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ylab("RMSE values")
rmse.melt <- melt(rmseDataTable)
?melt
rmse.melt <- melt(rmseDataTable,id=c("Model Type", "Data Type"))
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("Model type","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable,id=c("Model Type", "Data Type"))
rmse.melt <- melt(rmseDataTable,id=c("Model Type"))
rmse.melt <- melt(rmseDataTable, id = c("Model Type"))
rmseDataTable
names(rmseDataTable) <- c("modelType","Train RMSE values","Test RMSE values")
rmse.melt <- melt(rmseDataTable, id = c("modelType"))
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("modelType","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable, id = c("modelType"))
ggplot(rmse.melt, aes(x=`Model type`, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ylab("RMSE values")
ggplot(rmse.melt, aes(x=modelType, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ylab("RMSE values")
pacman::p_load(caret, data.table, ggplot2,gridExtra,ggpubr,MASS,stats,mlmetrics)
knitr::opts_chunk$set(echo = FALSE, fig.width=12, fig.height=6, fig.path = 'Figs/')
options(digits = 3)
set.seed(123)
windPowerGenerationData <- read.csv("C:/Users/rohit/Desktop/Analytics Project/All-that-glitters-is-not-gold/wind-mill-dataset.csv", header = TRUE)
windPowerGenerationData <- windPowerGenerationData[,-5]
str(windPowerGenerationData)
#windPowerGenerationData <- windPowerGenerationData[windPowerGenerationData$Power.output..MW. != 0,]
trainIndex <- sample(1:nrow(windPowerGenerationData),0.7*nrow(windPowerGenerationData))
windPowerGenerationData.train <- windPowerGenerationData[trainIndex,]
windPowerGenerationData.test <- windPowerGenerationData[-trainIndex,]
windPowerGenerationData.train <- setDT(windPowerGenerationData.train)
windPowerGenerationData.test <- setDT(windPowerGenerationData.test)
str(windPowerGenerationData.train)
str(windPowerGenerationData.test)
summary(windPowerGenerationData.train)
plot1 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Location,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_boxplot()+
ggtitle("Power generation across locations")+
xlab("Location") + ylab("Power generated (in MW)")
plot2 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Location,
y=windPowerGenerationData.train$Wind.Speed..m.s.))+
geom_boxplot()+
ggtitle("Wind speed across locations")+
xlab("Location") + ylab("Wind speed (in ms)")
plot3 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Location))+
geom_bar()+
ggtitle("Number of records across locations")+
xlab("Location")
plot4 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,                                                 y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Strong positive correlation exists")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
stat_cor(method="pearson")
grid.arrange(plot3,plot2,plot1,plot4,nrow=2,ncol=2)
windPowerGenerationData.train <-  windPowerGenerationData.train[windPowerGenerationData.train$Power.output..MW.!= 0]
plot5 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Power.output..MW.)) +
geom_histogram(color="black", fill="white",binwidth = 5) +
xlab("Power Output (in MW)")
plot7 <- ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.)) +
geom_histogram(color="black", fill="white",binwidth = 3) +
xlab("Wind speed (in ms)")
grid.arrange(plot5,plot7,ncol=2)
baselineModel.mean <- mean(windPowerGenerationData.train$Power.output..MW.)
ggplot(windPowerGenerationData.train, aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,                                                 y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Baseline model with mean power output")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
geom_hline(yintercept = mean(windPowerGenerationData.train$Power.output..MW.),linetype = "dashed",color  = "blue")
powerGeneration.lm <- lm(Power.output..MW.~Wind.Speed..m.s.,
data=windPowerGenerationData.train)
summary(powerGeneration.lm)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("The linear model seems to be doing a good job, right ?")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
geom_smooth(method = lm)
par(mfrow = c(2,2))
plot(powerGeneration.lm)
powerGeneration.lm1 <- lm(Power.output..MW.~ 0 + Wind.Speed..m.s.,
data=windPowerGenerationData.train)
summary(powerGeneration.lm1)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("The model with intercept set to 0 performs even worse")+
xlab("Wind speed (in ms)") + ylab("Power output (in MW)")+
stat_smooth(method = "lm", formula = y~0+x)
par(mfrow = c(2,2))
plot(powerGeneration.lm1)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the Power generation speed in MW")+
xlab("Wind speed (in ms)") + ylab("Log of Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
ggtitle("Log transforming the wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Power output (in MW)")
ggplot(windPowerGenerationData.train,aes(x=log(windPowerGenerationData.train$Wind.Speed..m.s.),
y=log(windPowerGenerationData.train$Power.output..MW.)))+
geom_point()+
ggtitle("Log transforming the power generation and wind speed in ms")+
xlab("Log of Wind speed (in ms)") + ylab("Log Power output (in MW)")
windSpeedSquared <- (log(windPowerGenerationData.train$Wind.Speed..m.s.))^2
windPowerGenerationData.train <- cbind(windPowerGenerationData.train,windSpeedSquared)
windSpeedSquared <- (log(windPowerGenerationData.test$Wind.Speed..m.s.))^2
windPowerGenerationData.test <- cbind(windPowerGenerationData.test,windSpeedSquared)
quadratic.lm <- lm(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train)
#outliers are removed
windPowerGenerationData.train <- windPowerGenerationData.train[-c(169,156,177),]
quadratic.lm <- lm(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train)
summary(quadratic.lm)
par(mfrow = c(2,2))
plot(quadratic.lm)
windPowerGenerationData.train$predictedQuadratic <-   predict(quadratic.lm)
str(windPowerGenerationData.train)
ggplot(windPowerGenerationData.train,aes(x=windPowerGenerationData.train$Wind.Speed..m.s.,
y=windPowerGenerationData.train$Power.output..MW.))+
geom_point()+
geom_line(aes(y = windPowerGenerationData.train$predictedQuadratic), size = 1, color = "blue")+
ggtitle("The quadratic model does seems to reduce the heteroscadesticity")+
xlab("Wind speed in ms") + ylab("Power output in MW")
train.control <- trainControl(method = "repeatedcv",number = 5, repeats = 4)
crossValidatedModel <- train(Power.output..MW.~log(Wind.Speed..m.s.)+windSpeedSquared, data = windPowerGenerationData.train, method = "lm",trControl = train.control)
crossValidatedRMSE.df <- data.frame(1:20,crossValidatedModel$resample$RMSE)
ggplot(crossValidatedRMSE.df, aes(x=crossValidatedRMSE.df$X1.20, y=crossValidatedRMSE.df$crossValidatedModel.resample.RMSE))+
geom_line()+
ggtitle("RMSE of predicted power output is consistent within 1 to 1.4 MW")+
xlab("Cross-validation number") +
ylab("RMSE")
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.train)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.train)
rmse1 <- RMSE(quadratic.predict,windPowerGenerationData.train$Power.output..MW.)
rmse2 <- RMSE(predictedPowerOriginal,windPowerGenerationData.train$Power.output..MW.)
rmse3 <- RMSE(mean(windPowerGenerationData.train$Power.output..MW.),windPowerGenerationData.train$Power.output..MW.)
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("modelType","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable, id = c("modelType"))
ggplot(rmse.melt, aes(x=modelType, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ggtitle("Model performs almost similar on test and training dataset")
ylab("RMSE values")
predictedPowerOriginal <- predict(powerGeneration.lm,windPowerGenerationData.test)
quadratic.predict <- predict(quadratic.lm,windPowerGenerationData.test)
rmse4 <- RMSE(quadratic.predict,windPowerGenerationData.test$Power.output..MW.)
rmse5 <- RMSE(predictedPowerOriginal,windPowerGenerationData.test$Power.output..MW.)
rmse6 <- RMSE(mean(windPowerGenerationData.test$Power.output..MW.),windPowerGenerationData.test$Power.output..MW.)
rmseDataTable <- data.table(var1 = c("Baseline model","Linear regression","Polynomial regression"),var = c(rmse3,rmse2,rmse1),var3 = c(rmse6,rmse5,rmse4))
names(rmseDataTable) <- c("modelType","Train RMSE values","Test RMSE values")
rmseDataTable
rmse.melt <- melt(rmseDataTable, id = c("modelType"))
ggplot(rmse.melt, aes(x=modelType, y=value, group=variable, color = variable))+
geom_line()+
geom_point()+
ggtitle("Model performs almost similar on test and training dataset")+
ylab("RMSE values")
ggplot(rmse.melt, aes(x=modelType, y=value, group=variable, color = variable))+
geom_line()+
geom_point(size = 3)+
ggtitle("Models perform almost similar on test and training dataset")+
ylab("RMSE values")
ggplot(rmse.melt, aes(x=modelType, y=value, group=variable, color = variable))+
geom_line()+
geom_point(size = 2)+
ggtitle("Models perform almost similar on test and training dataset")+
ylab("RMSE values")
ggplot(rmse.melt, aes(x=modelType, y=value, group=variable, color = variable))+
geom_line()+
geom_point(size = 4)+
ggtitle("Models perform almost similar on test and training dataset")+
ylab("RMSE values")
